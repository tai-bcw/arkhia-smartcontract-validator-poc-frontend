{
    "env": {
        "browser": true,
        "es2021": true
    },
    "extends": [
        "plugin:react/recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:react-hooks/recommended",
        "plugin:putout/safe",
        "prettier"
    ],
    "ignorePatterns": [
        "env/*",
        "src/locales/**/*.js",
        "src/locales/**/en-US.po",
        "node_modules",
        "build",
        "dist",
        ".DS_Store",
        ".env.*",
        ".vscode/",
        "package-lock.json",
        "reactBabelRefreshPlugin.js"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        },
        "ecmaVersion": "latest",
        "sourceType": "module"
    },
    "plugins": ["unused-imports", "@typescript-eslint", "putout", "import"],
    "rules": {
        "array-bracket-spacing": ["error", "never"],
        "brace-style": ["error", "1tbs", { "allowSingleLine": true }],
        "eol-last": ["error", "always"],
        "function-call-argument-newline": ["error", "consistent"],
        "import/first": "error",
        "import/newline-after-import": "error",
        "import/no-duplicates": "error",
        "import/order": [
            "error",
            {
                "groups": ["builtin", "external", ["internal", "sibling", "parent", "index"]],
                "newlines-between": "always"
            }
        ],
        "linebreak-style": ["error", "unix"],
        "no-duplicate-imports": "error",
        "no-extra-semi": "error",
        "no-multi-spaces": "error",
        "no-multiple-empty-lines": ["error", { "max": 2, "maxEOF": 0 }],
        "no-restricted-imports": [
            "error",
            {
                "paths": [
                    {
                        "name": "@lingui/macro",
                        "importNames": ["t"],
                        "message": "Please use <Trans> instead of t."
                    }
                ],
                "patterns": [
                    {
                        "group": ["**/dist"],
                        "message": "Do not import from dist/ - this is an implementation detail, and breaks tree-shaking."
                    },
                    {
                        "group": ["!styled-components/macro"]
                    }
                ]
            }
        ],
        "no-trailing-spaces": "error",
        // ⬇️ WARNING: subject to change
        "object-curly-newline": [
            "error",
            {
                "ImportDeclaration": { "multiline": true },
                "ExportDeclaration": "always",
                "ObjectExpression": { "multiline": true, "minProperties": 2 },
                "ObjectPattern": { "multiline": true }
            }
        ],
        "object-curly-spacing": ["error", "always"],
        "object-property-newline": [
            "error",
            {
                "allowAllPropertiesOnSameLine": true
            }
        ],
        "object-shorthand": ["error", "always"],
        "prefer-destructuring": [
            "error",
            {
                "array": false,
                "object": true
            },
            {
                "enforceForRenamedProperties": false
            }
        ],
        "putout/add-newline-before-function-call": "off",
        "putout/align-spaces": "off",
        "putout/destructuring-as-function-argument": "off",
        "putout/multiple-properties-destructuring": [
            "error",
            {
                "minProperties": 3
            }
        ],
        "putout/objects-braces-inside-array": "off",
        "putout/object-init": "off",
        "putout/putout": [
            "error",
            {
                "rules": {
                    "remove-console": "off",
                    "remove-useless-variables/destruct": "off",
                    "remove-unused-variables": "off",
                    "remove-empty/import": "off"
                }
            }
        ],
        "putout/remove-empty-newline-after-import": "off",
        "quote-props": ["error", "as-needed"],

        // Forbid certain propTypes (any, array, object)
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/843d71a432baf0f01f598d7cf1eea75ad6896e4b/docs/rules/forbid-prop-types.md
        "react/forbid-prop-types": [
            "error",
            {
                "forbid": ["any", "array", "object"],
                "checkContextTypes": true,
                "checkChildContextTypes": true
            }
        ],
        // Forbid certain props on DOM Nodes
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/843d71a432baf0f01f598d7cf1eea75ad6896e4b/docs/rules/forbid-dom-props.md
        "react/forbid-dom-props": ["off", { "forbid": [] }],

        // Enforce boolean attributes notation in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md
        "react/jsx-boolean-value": ["error", "never", { "always": [] }],

        // Validate closing bracket location in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md
        "react/jsx-closing-bracket-location": ["error", "line-aligned"],

        // Validate closing tag location in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md
        "react/jsx-closing-tag-location": "error",

        // Enforce or disallow spaces inside of curly braces in JSX attributes
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md
        "react/jsx-curly-spacing": ["error", "never", { "allowMultiline": true }],

        // Enforce event handler naming conventions in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-handler-names.md
        "react/jsx-handler-names": [
            "off",
            {
                "eventHandlerPrefix": "handle",
                "eventHandlerPropPrefix": "on"
            }
        ],

        // Validate props indentation in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-indent-props.md
        "react/jsx-indent-props": ["error", 4],

        // Validate JSX has key prop when in array or iterator
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-key.md
        // Turned off because it has too many false positives
        "react/jsx-key": "off",

        // Limit maximum of props on a single line in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-max-props-per-line.md
        "react/jsx-max-props-per-line": ["error", { "maximum": 1, "when": "multiline" }],

        // Prevent duplicate props in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-duplicate-props.md
        "react/jsx-no-duplicate-props": ["error", { "ignoreCase": true }],

        // Prevent usage of unwrapped JSX strings
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md
        "react/jsx-no-literals": ["off", { "noStrings": true }],

        // Disallow undeclared variables in JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-undef.md
        "react/jsx-no-undef": "error",

        // Enforce PascalCase for user-defined JSX components
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md
        "react/jsx-pascal-case": [
            "error",
            {
                "allowAllCaps": true,
                "ignore": []
            }
        ],

        // Enforce props alphabetical sorting
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md
        "react/jsx-sort-props": [
            "warn",
            {
                "ignoreCase": true,
                "callbacksLast": false,
                "shorthandFirst": true,
                "shorthandLast": false,
                "noSortAlphabetically": false,
                "reservedFirst": true
            }
        ],

        // Prevent React to be incorrectly marked as unused
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-uses-react.md
        "react/jsx-uses-react": ["error"],

        // Prevent variables used in JSX to be incorrectly marked as unused
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-uses-vars.md
        "react/jsx-uses-vars": "error",

        // Prevent usage of dangerous JSX properties
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-danger.md
        "react/no-danger": "warn",

        // Prevent usage of deprecated methods
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-deprecated.md
        "react/no-deprecated": ["error"],

        // Prevent using string references
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md
        "react/no-string-refs": "error",

        // Prevent usage of unknown DOM property
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md
        "react/no-unknown-property": "error",

        // Require stateless functions when not using lifecycle methods, setState or ref
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md
        "react/prefer-stateless-function": ["error", { "ignorePureComponents": true }],

        // Prevent missing React when using JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/react-in-jsx-scope.md
        "react/react-in-jsx-scope": "off",

        // Prevent extra closing tags for components without children
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md
        "react/self-closing-comp": "error",

        // Prevent missing parentheses around multilines JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/843d71a432baf0f01f598d7cf1eea75ad6896e4b/docs/rules/jsx-wrap-multilines.md
        "react/jsx-wrap-multilines": [
            "error",
            {
                "declaration": "parens-new-line",
                "assignment": "parens-new-line",
                "return": "parens-new-line",
                "arrow": "parens-new-line",
                "condition": "parens-new-line",
                "logical": "parens-new-line",
                "prop": "parens-new-line"
            }
        ],

        // Require that the first prop in a JSX element be on a new line when the element is multiline
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md
        "react/jsx-first-prop-new-line": ["error", "multiline-multiprop"],

        // Enforce spacing around jsx equals signs
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-equals-spacing.md
        "react/jsx-equals-spacing": ["error", "never"],

        // Enforce JSX indentation
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-indent.md
        "react/jsx-indent": ["error", 4],

        // Disallow target="_blank" on links
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/ac102885765be5ff37847a871f239c6703e1c7cc/docs/rules/jsx-no-target-blank.md
        "react/jsx-no-target-blank": ["error", { "enforceDynamicLinks": "always" }],

        // only .jsx files may have JSX
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md
        "react/jsx-filename-extension": ["error", { "extensions": [".tsx"] }],

        // prevent accidental JS comments from being injected into JSX as text
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-comment-textnodes.md
        "react/jsx-no-comment-textnodes": "error",

        // disallow using React.render/ReactDOM.render"s return value
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-render-return-value.md
        "react/no-render-return-value": "error",

        // warn against using findDOMNode()
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-find-dom-node.md
        "react/no-find-dom-node": "error",

        // Forbid certain props on Components
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-component-props.md
        "react/forbid-component-props": ["off", { "forbid": [] }],

        // Forbid certain elements
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/forbid-elements.md
        "react/forbid-elements": ["off", { "forbid": [] }],

        // Prevent problem with children and props.dangerouslySetInnerHTML
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-danger-with-children.md
        "react/no-danger-with-children": "error",

        // Require style prop value be an object or var
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/style-prop-object.md
        "react/style-prop-object": "error",

        // Prevent invalid characters from appearing in markup
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unescaped-entities.md
        "react/no-unescaped-entities": "error",

        // Prevent passing of children as props
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-children-prop.md
        "react/no-children-prop": "error",

        // Validate whitespace in and around the JSX opening and closing brackets
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/843d71a432baf0f01f598d7cf1eea75ad6896e4b/docs/rules/jsx-tag-spacing.md
        "react/jsx-tag-spacing": [
            "error",
            {
                "closingSlash": "never",
                "beforeSelfClosing": "always",
                "afterOpening": "never",
                "beforeClosing": "never"
            }
        ],

        // Enforce spaces before the closing bracket of self-closing JSX elements
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-space-before-closing.md
        // Deprecated in favor of jsx-tag-spacing
        "react/jsx-space-before-closing": ["off", "always"],

        // Prevent usage of Array index in keys
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md
        "react/no-array-index-key": "error",

        // Prevent void DOM elements from receiving children
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/void-dom-elements-no-children.md
        "react/void-dom-elements-no-children": "error",

        // Prevent unused state values
        // https://github.com/jsx-eslint/eslint-plugin-react/pull/1103/
        "react/no-unused-state": "error",

        // Enforces consistent naming for boolean props
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/843d71a432baf0f01f598d7cf1eea75ad6896e4b/docs/rules/boolean-prop-naming.md
        "react/boolean-prop-naming": [
            "off",
            {
                "propTypeNames": ["bool", "mutuallyExclusiveTrueProps"],
                "rule": "^(is|has)[A-Z]([A-Za-z0-9]?)+",
                "message": ""
            }
        ],

        // Prevents common casing typos
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/73abadb697034b5ccb514d79fb4689836fe61f91/docs/rules/no-typos.md
        "react/no-typos": "error",

        // Enforce curly braces or disallow unnecessary curly braces in JSX props and/or children
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-brace-presence.md
        "react/jsx-curly-brace-presence": ["error", { "props": "never", "children": "never" }],

        // One JSX Element Per Line
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/843d71a432baf0f01f598d7cf1eea75ad6896e4b/docs/rules/jsx-one-expression-per-line.md
        "react/jsx-one-expression-per-line": ["error", { "allow": "single-child" }],

        // Enforce consistent usage of destructuring assignment of props, state, and context
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/843d71a432baf0f01f598d7cf1eea75ad6896e4b/docs/rules/destructuring-assignment.md
        "react/destructuring-assignment": ["error", "always"],

        // Prevent using this.state within a this.setState
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/843d71a432baf0f01f598d7cf1eea75ad6896e4b/docs/rules/no-access-state-in-setstate.md
        "react/no-access-state-in-setstate": "error",

        // Prevent usage of button elements without an explicit type attribute
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/843d71a432baf0f01f598d7cf1eea75ad6896e4b/docs/rules/button-has-type.md
        "react/button-has-type": [
            "error",
            {
                "button": true,
                "submit": true,
                "reset": false
            }
        ],

        // Ensures inline tags are not rendered without spaces between them
        "react/jsx-child-element-spacing": "off",

        // Prevent this from being used in stateless functional components
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/843d71a432baf0f01f598d7cf1eea75ad6896e4b/docs/rules/no-this-in-sfc.md
        "react/no-this-in-sfc": "error",

        // Validate JSX maximum depth
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/abe8381c0d6748047224c430ce47f02e40160ed0/docs/rules/jsx-max-depth.md
        "react/jsx-max-depth": "off",

        // Disallow multiple spaces between inline JSX props
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/ac102885765be5ff37847a871f239c6703e1c7cc/docs/rules/jsx-props-no-multi-spaces.md
        "react/jsx-props-no-multi-spaces": "error",

        // Prevent usage of UNSAFE_ methods
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/157cc932be2cfaa56b3f5b45df6f6d4322a2f660/docs/rules/no-unsafe.md
        "react/no-unsafe": "off",

        // Enforce shorthand or standard form for React fragments
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/bc976b837abeab1dffd90ac6168b746a83fc83cc/docs/rules/jsx-fragments.md
        "react/jsx-fragments": ["error", "syntax"],

        // Enforce linebreaks in curly braces in JSX attributes and expressions.
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-newline.md
        "react/jsx-curly-newline": [
            "error",
            {
                "multiline": "consistent",
                "singleline": "consistent"
            }
        ],

        // Enforces where React component static properties should be positioned
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/static-property-placement.md
        // TODO: set to "static public field" once babel-preset-airbnb supports public class fields
        "react/static-property-placement": ["error", "property assignment"],

        // Prevent usage of `javascript:` URLs
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-script-url.md
        "react/jsx-no-script-url": [
            "error",
            [
                {
                    "name": "Link",
                    "props": ["to"]
                }
            ]
        ],

        // Prevent adjacent inline elements not separated by whitespace
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-adjacent-inline-elements.md
        // TODO: enable? semver-major
        "react/no-adjacent-inline-elements": "off",

        // Enforce a new line after jsx elements and expressions
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/e2eaadae316f9506d163812a09424eb42698470a/docs/rules/jsx-newline.md
        "react/jsx-newline": "off",

        // Prevent react contexts from taking non-stable values
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/e2eaadae316f9506d163812a09424eb42698470a/docs/rules/jsx-no-constructed-context-values.md
        "react/jsx-no-constructed-context-values": "error",

        // Prevent creating unstable components inside components
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/c2a790a3472eea0f6de984bdc3ee2a62197417fb/docs/rules/no-unstable-nested-components.md
        "react/no-unstable-nested-components": "error",

        // No useless fragments
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-useless-fragment.md
        "react/jsx-no-useless-fragment": "off",

        // Enforce that namespaces are not used in React elements
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/8785c169c25b09b33c95655bf508cf46263bc53f/docs/rules/no-namespace.md
        "react/no-namespace": "error",

        // Prefer exact proptype definitions
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/8785c169c25b09b33c95655bf508cf46263bc53f/docs/rules/prefer-exact-props.md
        "react/prefer-exact-props": "error",

        // Prevent usage of invalid attributes
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/21e01b61af7a38fc86d94f27eb66cda8054582ed/docs/rules/no-invalid-html-attribute.md
        "react/no-invalid-html-attribute": "error",

        // Ensure destructuring and symmetric naming of useState hook value and setter variables
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/c8833f301314dab3e79ef7ac4cf863e4d5fa0019/docs/rules/hook-use-state.md
        // TODO: semver-major, enable
        "react/hook-use-state": "off",

        // Enforce sandbox attribute on iframe elements
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/c8833f301314dab3e79ef7ac4cf863e4d5fa0019/docs/rules/iframe-missing-sandbox.md
        // TODO: semver-major, enable
        "react/iframe-missing-sandbox": "off",

        // Prevent problematic leaked values from being rendered
        // https://github.com/jsx-eslint/eslint-plugin-react/blob/c42b624d0fb9ad647583a775ab9751091eec066f/docs/rules/jsx-no-leaked-render.md
        // TODO: semver-major, enable
        "react/jsx-no-leaked-render": "off",
        "remove-unused-variables": "off",
        "semi": ["error", "always"],
        "space-before-function-paren": ["error", "always"],
        "unused-imports/no-unused-imports": "error",

        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/ban-ts-ignore": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/indent": ["error", 4],
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/quotes": ["error", "backtick"]
    },
    "settings": {
        "react": {
            "version": "detect"
        }
    }
}
 